<table style="float:left" width="100%">
  <tbody><tr>
    <td bgcolor="white"><a href="#Introduction">Introduction</a></td>
    <td>Introduction and conventions used.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lisp-Data-Types">Lisp Data Types</a></td>
    <td>Data types of objects in Emacs Lisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Numbers">Numbers</a></td>
    <td>Numbers and arithmetic functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Strings-and-Characters">Strings and Characters</a></td>
    <td>Strings, and functions that work on them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lists">Lists</a></td>
    <td>Lists, cons cells, and related functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sequences-Arrays-Vectors">Sequences Arrays Vectors</a></td>
    <td>Lists, strings and vectors are called sequences.
                                Certain functions act on any kind of sequence.
                                The description of vectors is here as well.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Records">Records</a></td>
    <td>Compound objects with programmer-defined types.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Hash-Tables">Hash Tables</a></td>
    <td>Very fast lookup-tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Symbols">Symbols</a></td>
    <td>Symbols represent names, uniquely.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Evaluation">Evaluation</a></td>
    <td>How Lisp expressions are evaluated.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Control-Structures">Control Structures</a></td>
    <td>Conditionals, loops, nonlocal exits.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Variables">Variables</a></td>
    <td>Using symbols in programs to stand for values.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Functions">Functions</a></td>
    <td>A function is a Lisp program
                              that can be invoked from other functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Macros">Macros</a></td>
    <td>Macros are a way to extend the Lisp language.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Customization">Customization</a></td>
    <td>Making variables and faces customizable.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Loading">Loading</a></td>
    <td>Reading files of Lisp code into Lisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Byte-Compilation">Byte Compilation</a></td>
    <td>Compilation makes programs run faster.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Debugging">Debugging</a></td>
    <td>Tools and tips for debugging Lisp programs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Read-and-Print">Read and Print</a></td>
    <td>Converting Lisp objects to text and back.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffers">Minibuffers</a></td>
    <td>Using the minibuffer to read input.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Command-Loop">Command Loop</a></td>
    <td>How the editor command loop works,
                              and how you can call its subroutines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keymaps">Keymaps</a></td>
    <td>Defining the bindings from keys to commands.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Modes">Modes</a></td>
    <td>Defining major and minor modes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Documentation">Documentation</a></td>
    <td>Writing and using documentation strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Files">Files</a></td>
    <td>Accessing files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Backups-and-Auto_002dSaving">Backups and Auto-Saving</a></td>
    <td>Controlling how backups and auto-save
                              files are made.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffers">Buffers</a></td>
    <td>Creating and using buffer objects.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Windows">Windows</a></td>
    <td>Manipulating windows and displaying buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frames">Frames</a></td>
    <td>Making multiple system-level windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Positions">Positions</a></td>
    <td>Buffer positions and motion functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Markers">Markers</a></td>
    <td>Markers represent positions and update
                              automatically when the text is changed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text">Text</a></td>
    <td>Examining and changing text in buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Non_002dASCII-Characters">Non-ASCII Characters</a></td>
    <td>Non-ASCII text in buffers and strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Searching-and-Matching">Searching and Matching</a></td>
    <td>Searching buffers for strings or regexps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Tables">Syntax Tables</a></td>
    <td>The syntax table controls word and list parsing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abbrevs">Abbrevs</a></td>
    <td>How Abbrev mode works, and its data structures.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Threads">Threads</a></td>
    <td>Concurrency in Emacs Lisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Processes">Processes</a></td>
    <td>Running and communicating with subprocesses.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Display">Display</a></td>
    <td>Features for controlling the screen display.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#System-Interface">System Interface</a></td>
    <td>Getting the user id, system type, environment
                              variables, and other such things.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Packaging">Packaging</a></td>
    <td>Preparing Lisp code for distribution.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Appendices

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Antinews">Antinews</a></td>
    <td>Info for users downgrading to Emacs 25.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#GNU-Free-Documentation-License">GNU Free Documentation License</a></td>
    <td>The license for this documentation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#GPL">GPL</a></td>
    <td>Conditions for copying and changing GNU Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Tips">Tips</a></td>
    <td>Advice and coding conventions for Emacs Lisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#GNU-Emacs-Internals">GNU Emacs Internals</a></td>
    <td>Building and dumping Emacs;
                              internal data structures.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-Errors">Standard Errors</a></td>
    <td>List of some standard error symbols.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-Keymaps">Standard Keymaps</a></td>
    <td>List of some standard keymaps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-Hooks">Standard Hooks</a></td>
    <td>List of some standard hook variables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Index">Index</a></td>
    <td>Index including concepts, functions, variables,
                              and other terms.
<!-- Do NOT modify the following 3 lines!  They must have this form to -->
<!-- be correctly identified by 'texinfo-multiple-files-update'.  In -->
<!-- particular, the detailed menu header line MUST be identical to the -->
<!-- value of 'texinfo-master-menu-header'.  See texnfo-upd.el. -->

  </td></tr></tbody></table>
  <table style="float:left" width="100%">
  <tbody><tr>
    <th colspan="2" style="text-align:left" align="left">Here are other nodes that are subnodes of those already listed,
mentioned here so you can get to them in one step:

<p>Introduction

  </p></th></tr>
  <tr>
    <td bgcolor="white"><a href="#Caveats">Caveats</a></td>
    <td>Flaws and a request for help.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lisp-History">Lisp History</a></td>
    <td>Emacs Lisp is descended from Maclisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Conventions">Conventions</a></td>
    <td>How the manual is formatted.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Version-Info">Version Info</a></td>
    <td>Which Emacs version is running?</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Acknowledgments">Acknowledgments</a></td>
    <td>The authors, editors, and sponsors of this manual.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Conventions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Some-Terms">Some Terms</a></td>
    <td>Explanation of terms we use in this manual.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#nil-and-t">nil and t</a></td>
    <td>How the symbols <code>nil</code> and <code>t</code> are used.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Evaluation-Notation">Evaluation Notation</a></td>
    <td>The format we use for examples of evaluation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Printing-Notation">Printing Notation</a></td>
    <td>The format we use when examples print text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Error-Messages">Error Messages</a></td>
    <td>The format we use for examples of errors.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Text-Notation">Buffer Text Notation</a></td>
    <td>The format we use for buffer contents in examples.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Format-of-Descriptions">Format of Descriptions</a></td>
    <td>Notation for describing functions, variables, etc.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Format of Descriptions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#A-Sample-Function-Description">A Sample Function Description</a></td>
    <td>A description of an imaginary
                                     function, <code>foo</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#A-Sample-Variable-Description">A Sample Variable Description</a></td>
    <td>A description of an imaginary
                                     variable, <code>electric-future-map</code>.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Lisp Data Types

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Printed-Representation">Printed Representation</a></td>
    <td>How Lisp objects are represented as text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Comments">Comments</a></td>
    <td>Comments and their formatting conventions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Programming-Types">Programming Types</a></td>
    <td>Types found in all Lisp systems.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Editing-Types">Editing Types</a></td>
    <td>Types specific to Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Circular-Objects">Circular Objects</a></td>
    <td>Read syntax for circular structure.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Type-Predicates">Type Predicates</a></td>
    <td>Tests related to types.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Equality-Predicates">Equality Predicates</a></td>
    <td>Tests of equality between any two objects.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Programming Types

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Integer-Type">Integer Type</a></td>
    <td>Numbers without fractional parts.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Floating_002dPoint-Type">Floating-Point Type</a></td>
    <td>Numbers with fractional parts and with a large range.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Character-Type">Character Type</a></td>
    <td>The representation of letters, numbers and
                          control characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Symbol-Type">Symbol Type</a></td>
    <td>A multi-use object that refers to a function,
                        variable, or property list, and has a unique identity.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sequence-Type">Sequence Type</a></td>
    <td>Both lists and arrays are classified as sequences.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Cons-Cell-Type">Cons Cell Type</a></td>
    <td>Cons cells, and lists (which are made from cons cells).</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Array-Type">Array Type</a></td>
    <td>Arrays include strings and vectors.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#String-Type">String Type</a></td>
    <td>An (efficient) array of characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Vector-Type">Vector Type</a></td>
    <td>One-dimensional arrays.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Char_002dTable-Type">Char-Table Type</a></td>
    <td>One-dimensional sparse arrays indexed by characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Bool_002dVector-Type">Bool-Vector Type</a></td>
    <td>One-dimensional arrays of <code>t</code> or <code>nil</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Hash-Table-Type">Hash Table Type</a></td>
    <td>Super-fast lookup tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Type">Function Type</a></td>
    <td>A piece of executable code you can call from elsewhere.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Macro-Type">Macro Type</a></td>
    <td>A method of expanding an expression into another
                          expression, more fundamental but less pretty.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Primitive-Function-Type">Primitive Function Type</a></td>
    <td>A function written in C, callable from Lisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Byte_002dCode-Type">Byte-Code Type</a></td>
    <td>A function written in Lisp, then compiled.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Record-Type">Record Type</a></td>
    <td>Compound objects with programmer-defined types.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Type-Descriptors">Type Descriptors</a></td>
    <td>Objects holding information about types.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Autoload-Type">Autoload Type</a></td>
    <td>A type used for automatically loading seldom-used
                          functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Finalizer-Type">Finalizer Type</a></td>
    <td>Runs code when no longer reachable.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Character Type

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Char-Syntax">Basic Char Syntax</a></td>
    <td>Syntax for regular characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#General-Escape-Syntax">General Escape Syntax</a></td>
    <td>How to specify characters by their codes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Ctl_002dChar-Syntax">Ctl-Char Syntax</a></td>
    <td>Syntax for control characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Meta_002dChar-Syntax">Meta-Char Syntax</a></td>
    <td>Syntax for meta-characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Other-Char-Bits">Other Char Bits</a></td>
    <td>Syntax for hyper-, super-, and alt-characters.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Cons Cell and List Types

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Box-Diagrams">Box Diagrams</a></td>
    <td>Drawing pictures of lists.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dotted-Pair-Notation">Dotted Pair Notation</a></td>
    <td>A general syntax for cons cells.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Association-List-Type">Association List Type</a></td>
    <td>A specially constructed list.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">String Type

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-for-Strings">Syntax for Strings</a></td>
    <td>How to specify Lisp strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Non_002dASCII-in-Strings">Non-ASCII in Strings</a></td>
    <td>International characters in strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Nonprinting-Characters">Nonprinting Characters</a></td>
    <td>Literal unprintable characters in strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Props-and-Strings">Text Props and Strings</a></td>
    <td>Strings with text properties.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Editing Types

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Type">Buffer Type</a></td>
    <td>The basic object of editing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Marker-Type">Marker Type</a></td>
    <td>A position in a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Type">Window Type</a></td>
    <td>Buffers are displayed in windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Type">Frame Type</a></td>
    <td>Windows subdivide frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Terminal-Type">Terminal Type</a></td>
    <td>A terminal device displays frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Configuration-Type">Window Configuration Type</a></td>
    <td>Recording the way a frame is subdivided.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Configuration-Type">Frame Configuration Type</a></td>
    <td>Recording the status of all frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Process-Type">Process Type</a></td>
    <td>A subprocess of Emacs running on the underlying OS.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Thread-Type">Thread Type</a></td>
    <td>A thread of Emacs Lisp execution.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mutex-Type">Mutex Type</a></td>
    <td>An exclusive lock for thread synchronization.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Condition-Variable-Type">Condition Variable Type</a></td>
    <td>Condition variable for thread synchronization.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Stream-Type">Stream Type</a></td>
    <td>Receive or send characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keymap-Type">Keymap Type</a></td>
    <td>What function a keystroke invokes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Overlay-Type">Overlay Type</a></td>
    <td>How an overlay is represented.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Font-Type">Font Type</a></td>
    <td>Fonts for displaying text.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Numbers

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Integer-Basics">Integer Basics</a></td>
    <td>Representation and range of integers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Float-Basics">Float Basics</a></td>
    <td>Representation and range of floating point.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Predicates-on-Numbers">Predicates on Numbers</a></td>
    <td>Testing for numbers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Comparison-of-Numbers">Comparison of Numbers</a></td>
    <td>Equality and inequality predicates.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Numeric-Conversions">Numeric Conversions</a></td>
    <td>Converting float to integer and vice versa.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Arithmetic-Operations">Arithmetic Operations</a></td>
    <td>How to add, subtract, multiply and divide.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Rounding-Operations">Rounding Operations</a></td>
    <td>Explicitly rounding floating-point numbers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Bitwise-Operations">Bitwise Operations</a></td>
    <td>Logical and, or, not, shifting.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Math-Functions">Math Functions</a></td>
    <td>Trig, exponential and logarithmic functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Random-Numbers">Random Numbers</a></td>
    <td>Obtaining random integers, predictable or not.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Strings and Characters

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#String-Basics">String Basics</a></td>
    <td>Basic properties of strings and characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Predicates-for-Strings">Predicates for Strings</a></td>
    <td>Testing whether an object is a string or char.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Strings">Creating Strings</a></td>
    <td>Functions to allocate new strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Modifying-Strings">Modifying Strings</a></td>
    <td>Altering the contents of an existing string.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Comparison">Text Comparison</a></td>
    <td>Comparing characters or strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#String-Conversion">String Conversion</a></td>
    <td>Converting to and from characters and strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Formatting-Strings">Formatting Strings</a></td>
    <td><code>format</code>: Emacs's analogue of <code>printf</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Case-Conversion">Case Conversion</a></td>
    <td>Case conversion functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Case-Tables">Case Tables</a></td>
    <td>Customizing case conversion.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Lists

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Cons-Cells">Cons Cells</a></td>
    <td>How lists are made out of cons cells.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#List_002drelated-Predicates">List-related Predicates</a></td>
    <td>Is this object a list?  Comparing two lists.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#List-Elements">List Elements</a></td>
    <td>Extracting the pieces of a list.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Building-Lists">Building Lists</a></td>
    <td>Creating list structure.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#List-Variables">List Variables</a></td>
    <td>Modifying lists stored in variables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Modifying-Lists">Modifying Lists</a></td>
    <td>Storing new pieces into an existing list.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sets-And-Lists">Sets And Lists</a></td>
    <td>A list can represent a finite mathematical set.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Association-Lists">Association Lists</a></td>
    <td>A list can represent a finite relation or mapping.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Property-Lists">Property Lists</a></td>
    <td>A list of paired elements.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Modifying Existing List Structure

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Setcar">Setcar</a></td>
    <td>Replacing an element in a list.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Setcdr">Setcdr</a></td>
    <td>Replacing part of the list backbone.
                              This can be used to remove or add elements.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Rearrangement">Rearrangement</a></td>
    <td>Reordering the elements in a list; combining lists.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Property Lists

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Plists-and-Alists">Plists and Alists</a></td>
    <td>Comparison of the advantages of property
                              lists and association lists.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Plist-Access">Plist Access</a></td>
    <td>Accessing property lists stored elsewhere.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Sequences, Arrays, and Vectors

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Sequence-Functions">Sequence Functions</a></td>
    <td>Functions that accept any kind of sequence.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Arrays">Arrays</a></td>
    <td>Characteristics of arrays in Emacs Lisp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Array-Functions">Array Functions</a></td>
    <td>Functions specifically for arrays.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Vectors">Vectors</a></td>
    <td>Special characteristics of Emacs Lisp vectors.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Vector-Functions">Vector Functions</a></td>
    <td>Functions specifically for vectors.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Char_002dTables">Char-Tables</a></td>
    <td>How to work with char-tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Bool_002dVectors">Bool-Vectors</a></td>
    <td>How to work with bool-vectors.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Rings">Rings</a></td>
    <td>Managing a fixed-size ring of objects.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Records

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Record-Functions">Record Functions</a></td>
    <td>Functions for records.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Backward-Compatibility">Backward Compatibility</a></td>
    <td>Compatibility for cl-defstruct.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Hash Tables

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Hash">Creating Hash</a></td>
    <td>Functions to create hash tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Hash-Access">Hash Access</a></td>
    <td>Reading and writing the hash table contents.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Hash">Defining Hash</a></td>
    <td>Defining new comparison methods.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Other-Hash">Other Hash</a></td>
    <td>Miscellaneous.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Symbols

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Symbol-Components">Symbol Components</a></td>
    <td>Symbols have names, values, function definitions
                              and property lists.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Definitions">Definitions</a></td>
    <td>A definition says how a symbol will be used.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Symbols">Creating Symbols</a></td>
    <td>How symbols are kept unique.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Symbol-Properties">Symbol Properties</a></td>
    <td>Each symbol has a property list
                              for recording miscellaneous information.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Symbol Properties

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Symbol-Plists">Symbol Plists</a></td>
    <td>Accessing symbol properties.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-Properties">Standard Properties</a></td>
    <td>Standard meanings of symbol properties.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Evaluation

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Intro-Eval">Intro Eval</a></td>
    <td>Evaluation in the scheme of things.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Forms">Forms</a></td>
    <td>How various sorts of objects are evaluated.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Quoting">Quoting</a></td>
    <td>Avoiding evaluation (to put constants in
                              the program).</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Backquote">Backquote</a></td>
    <td>Easier construction of list structure.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Eval">Eval</a></td>
    <td>How to invoke the Lisp interpreter explicitly.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Kinds of Forms

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Self_002dEvaluating-Forms">Self-Evaluating Forms</a></td>
    <td>Forms that evaluate to themselves.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Symbol-Forms">Symbol Forms</a></td>
    <td>Symbols evaluate as variables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Classifying-Lists">Classifying Lists</a></td>
    <td>How to distinguish various sorts of list forms.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Indirection">Function Indirection</a></td>
    <td>When a symbol appears as the car of a list,
                              we find the real function via the symbol.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Forms">Function Forms</a></td>
    <td>Forms that call functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Macro-Forms">Macro Forms</a></td>
    <td>Forms that call macros.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Special-Forms">Special Forms</a></td>
    <td>Special forms are idiosyncratic primitives,
                              most of them extremely important.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Autoloading">Autoloading</a></td>
    <td>Functions set up to load files
                              containing their real definitions.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Control Structures

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Sequencing">Sequencing</a></td>
    <td>Evaluation in textual order.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Conditionals">Conditionals</a></td>
    <td><code>if</code>, <code>cond</code>, <code>when</code>, <code>unless</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Combining-Conditions">Combining Conditions</a></td>
    <td><code>and</code>, <code>or</code>, <code>not</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Pattern_002dMatching-Conditional">Pattern-Matching Conditional</a></td>
    <td>How to use <code>pcase</code> and friends.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Iteration">Iteration</a></td>
    <td><code>while</code> loops.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Generators">Generators</a></td>
    <td>Generic sequences and coroutines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Nonlocal-Exits">Nonlocal Exits</a></td>
    <td>Jumping out of a sequence.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Nonlocal Exits

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Catch-and-Throw">Catch and Throw</a></td>
    <td>Nonlocal exits for the program's own purposes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Examples-of-Catch">Examples of Catch</a></td>
    <td>Showing how such nonlocal exits can be written.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Errors">Errors</a></td>
    <td>How errors are signaled and handled.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Cleanups">Cleanups</a></td>
    <td>Arranging to run a cleanup form if an
                              error happens.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Errors

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Signaling-Errors">Signaling Errors</a></td>
    <td>How to report an error.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Processing-of-Errors">Processing of Errors</a></td>
    <td>What Emacs does when you report an error.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Handling-Errors">Handling Errors</a></td>
    <td>How you can trap errors and continue execution.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Error-Symbols">Error Symbols</a></td>
    <td>How errors are classified for trapping them.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Variables

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Global-Variables">Global Variables</a></td>
    <td>Variable values that exist permanently, everywhere.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Constant-Variables">Constant Variables</a></td>
    <td>Variables that never change.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Local-Variables">Local Variables</a></td>
    <td>Variable values that exist only temporarily.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Void-Variables">Void Variables</a></td>
    <td>Symbols that lack values.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Variables">Defining Variables</a></td>
    <td>A definition says a symbol is used as a variable.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Tips-for-Defining">Tips for Defining</a></td>
    <td>Things you should think about when you
                              define a variable.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Accessing-Variables">Accessing Variables</a></td>
    <td>Examining values of variables whose names
                              are known only at run time.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Setting-Variables">Setting Variables</a></td>
    <td>Storing new values in variables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Watching-Variables">Watching Variables</a></td>
    <td>Running a function when a variable is changed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Variable-Scoping">Variable Scoping</a></td>
    <td>How Lisp chooses among local and global values.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer_002dLocal-Variables">Buffer-Local Variables</a></td>
    <td>Variable values in effect only in one buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Local-Variables">File Local Variables</a></td>
    <td>Handling local variable lists in files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Directory-Local-Variables">Directory Local Variables</a></td>
    <td>Local variables common to all files in a
                                directory.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Connection-Local-Variables">Connection Local Variables</a></td>
    <td>Local variables common for remote connections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Variable-Aliases">Variable Aliases</a></td>
    <td>Variables that are aliases for other variables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Variables-with-Restricted-Values">Variables with Restricted Values</a></td>
    <td>Non-constant variables whose value can
                                        <em>not</em> be an arbitrary Lisp object.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Generalized-Variables">Generalized Variables</a></td>
    <td>Extending the concept of variables.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Scoping Rules for Variable Bindings

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Dynamic-Binding">Dynamic Binding</a></td>
    <td>The default for binding local variables in Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dynamic-Binding-Tips">Dynamic Binding Tips</a></td>
    <td>Avoiding problems with dynamic binding.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lexical-Binding">Lexical Binding</a></td>
    <td>A different type of local variable binding.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Using-Lexical-Binding">Using Lexical Binding</a></td>
    <td>How to enable lexical binding.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Buffer-Local Variables

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Intro-to-Buffer_002dLocal">Intro to Buffer-Local</a></td>
    <td>Introduction and concepts.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Buffer_002dLocal">Creating Buffer-Local</a></td>
    <td>Creating and destroying buffer-local bindings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Default-Value">Default Value</a></td>
    <td>The default value is seen in buffers
                              that don't have their own buffer-local values.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Generalized Variables

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Setting-Generalized-Variables">Setting Generalized Variables</a></td>
    <td>The <code>setf</code> macro.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Adding-Generalized-Variables">Adding Generalized Variables</a></td>
    <td>Defining new <code>setf</code> forms.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Functions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#What-Is-a-Function">What Is a Function</a></td>
    <td>Lisp functions vs. primitives; terminology.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lambda-Expressions">Lambda Expressions</a></td>
    <td>How functions are expressed as Lisp objects.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Names">Function Names</a></td>
    <td>A symbol can serve as the name of a function.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Functions">Defining Functions</a></td>
    <td>Lisp expressions for defining functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Calling-Functions">Calling Functions</a></td>
    <td>How to use an existing function.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mapping-Functions">Mapping Functions</a></td>
    <td>Applying a function to each element of a list, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Anonymous-Functions">Anonymous Functions</a></td>
    <td>Lambda expressions are functions with no names.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Generic-Functions">Generic Functions</a></td>
    <td>Polymorphism, Emacs-style.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Cells">Function Cells</a></td>
    <td>Accessing or setting the function definition
                              of a symbol.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Closures">Closures</a></td>
    <td>Functions that enclose a lexical environment.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Advising-Functions">Advising Functions</a></td>
    <td>Adding to the definition of a function.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Obsolete-Functions">Obsolete Functions</a></td>
    <td>Declaring functions obsolete.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Inline-Functions">Inline Functions</a></td>
    <td>Defining functions that the compiler
                              will expand inline.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Declare-Form">Declare Form</a></td>
    <td>Adding additional information about a function.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Declaring-Functions">Declaring Functions</a></td>
    <td>Telling the compiler that a function is defined.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Safety">Function Safety</a></td>
    <td>Determining whether a function is safe to call.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Related-Topics">Related Topics</a></td>
    <td>Cross-references to specific Lisp primitives
                              that have a special bearing on how
                              functions work.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Lambda Expressions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Lambda-Components">Lambda Components</a></td>
    <td>The parts of a lambda expression.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Simple-Lambda">Simple Lambda</a></td>
    <td>A simple example.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Argument-List">Argument List</a></td>
    <td>Details and special features of argument lists.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Documentation">Function Documentation</a></td>
    <td>How to put documentation in a function.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Advising Emacs Lisp Functions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Core-Advising-Primitives">Core Advising Primitives</a></td>
    <td>Primitives to manipulate advice.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Advising-Named-Functions">Advising Named Functions</a></td>
    <td>Advising named functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Advice-combinators">Advice combinators</a></td>
    <td>Ways to compose advice.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Porting-old-advice">Porting old advice</a></td>
    <td>Adapting code using the old defadvice.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Macros

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Simple-Macro">Simple Macro</a></td>
    <td>A basic example.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Expansion">Expansion</a></td>
    <td>How, when and why macros are expanded.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Compiling-Macros">Compiling Macros</a></td>
    <td>How macros are expanded by the compiler.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Macros">Defining Macros</a></td>
    <td>How to write a macro definition.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Problems-with-Macros">Problems with Macros</a></td>
    <td>Don't evaluate the macro arguments too many times.
                              Don't hide the user's variables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Indenting-Macros">Indenting Macros</a></td>
    <td>Specifying how to indent macro calls.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Common Problems Using Macros

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Wrong-Time">Wrong Time</a></td>
    <td>Do the work in the expansion, not in the macro.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Argument-Evaluation">Argument Evaluation</a></td>
    <td>The expansion should evaluate each macro arg once.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Surprising-Local-Vars">Surprising Local Vars</a></td>
    <td>Local variable bindings in the expansion
                              require special care.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Eval-During-Expansion">Eval During Expansion</a></td>
    <td>Don't evaluate them; put them in the expansion.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Repeated-Expansion">Repeated Expansion</a></td>
    <td>Avoid depending on how many times expansion is done.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Customization Settings

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Common-Keywords">Common Keywords</a></td>
    <td>Common keyword arguments for all kinds of
                              customization declarations.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Group-Definitions">Group Definitions</a></td>
    <td>Writing customization group definitions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Variable-Definitions">Variable Definitions</a></td>
    <td>Declaring user options.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Customization-Types">Customization Types</a></td>
    <td>Specifying the type of a user option.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Applying-Customizations">Applying Customizations</a></td>
    <td>Functions to apply customization settings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Custom-Themes">Custom Themes</a></td>
    <td>Writing Custom themes.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Customization Types

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Simple-Types">Simple Types</a></td>
    <td>Simple customization types: sexp, integer, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Composite-Types">Composite Types</a></td>
    <td>Build new types from other types or data.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Splicing-into-Lists">Splicing into Lists</a></td>
    <td>Splice elements into list with <code>:inline</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Type-Keywords">Type Keywords</a></td>
    <td>Keyword-argument pairs in a customization type.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-New-Types">Defining New Types</a></td>
    <td>Give your type a name.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Loading

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#How-Programs-Do-Loading">How Programs Do Loading</a></td>
    <td>The <code>load</code> function and others.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Load-Suffixes">Load Suffixes</a></td>
    <td>Details about the suffixes that <code>load</code> tries.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Library-Search">Library Search</a></td>
    <td>Finding a library to load.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Loading-Non_002dASCII">Loading Non-ASCII</a></td>
    <td>Non-<acronym>ASCII</acronym> characters in Emacs Lisp files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Autoload">Autoload</a></td>
    <td>Setting up a function to autoload.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Repeated-Loading">Repeated Loading</a></td>
    <td>Precautions about loading a file twice.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Named-Features">Named Features</a></td>
    <td>Loading a library if it isn't already loaded.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Where-Defined">Where Defined</a></td>
    <td>Finding which file defined a certain symbol.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Unloading">Unloading</a></td>
    <td>How to unload a library that was loaded.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Hooks-for-Loading">Hooks for Loading</a></td>
    <td>Providing code to be run when
                              particular libraries are loaded.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dynamic-Modules">Dynamic Modules</a></td>
    <td>Modules provide additional Lisp primitives.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Byte Compilation

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Speed-of-Byte_002dCode">Speed of Byte-Code</a></td>
    <td>An example of speedup from byte compilation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Compilation-Functions">Compilation Functions</a></td>
    <td>Byte compilation functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Docs-and-Compilation">Docs and Compilation</a></td>
    <td>Dynamic loading of documentation strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dynamic-Loading">Dynamic Loading</a></td>
    <td>Dynamic loading of individual functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Eval-During-Compile">Eval During Compile</a></td>
    <td>Code to be evaluated when you compile.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Compiler-Errors">Compiler Errors</a></td>
    <td>Handling compiler error messages.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Byte_002dCode-Objects">Byte-Code Objects</a></td>
    <td>The data type used for byte-compiled functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Disassembly">Disassembly</a></td>
    <td>Disassembling byte-code; how to read byte-code.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Debugging Lisp Programs

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Debugger">Debugger</a></td>
    <td>A debugger for the Emacs Lisp evaluator.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug">Edebug</a></td>
    <td>A source-level Emacs Lisp debugger.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Errors">Syntax Errors</a></td>
    <td>How to find syntax errors.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Test-Coverage">Test Coverage</a></td>
    <td>Ensuring you have tested all branches in your code.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Profiling">Profiling</a></td>
    <td>Measuring the resources that your code uses.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">The Lisp Debugger

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Error-Debugging">Error Debugging</a></td>
    <td>Entering the debugger when an error happens.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Infinite-Loops">Infinite Loops</a></td>
    <td>Stopping and debugging a program that doesn't exit.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Debugging">Function Debugging</a></td>
    <td>Entering it when a certain function is called.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Variable-Debugging">Variable Debugging</a></td>
    <td>Entering it when a variable is modified.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Explicit-Debug">Explicit Debug</a></td>
    <td>Entering it at a certain point in the program.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Using-Debugger">Using Debugger</a></td>
    <td>What the debugger does; what you see while in it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Debugger-Commands">Debugger Commands</a></td>
    <td>Commands used while in the debugger.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Invoking-the-Debugger">Invoking the Debugger</a></td>
    <td>How to call the function <code>debug</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Internals-of-Debugger">Internals of Debugger</a></td>
    <td>Subroutines of the debugger, and global variables.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Edebug

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Using-Edebug">Using Edebug</a></td>
    <td>Introduction to use of Edebug.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Instrumenting">Instrumenting</a></td>
    <td>You must instrument your code
                              in order to debug it with Edebug.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Execution-Modes">Edebug Execution Modes</a></td>
    <td>Execution modes, stopping more or less often.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Jumping">Jumping</a></td>
    <td>Commands to jump to a specified place.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Misc">Edebug Misc</a></td>
    <td>Miscellaneous commands.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Breaks">Breaks</a></td>
    <td>Setting breakpoints to make the program stop.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Trapping-Errors">Trapping Errors</a></td>
    <td>Trapping errors with Edebug.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Views">Edebug Views</a></td>
    <td>Views inside and outside of Edebug.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Eval">Edebug Eval</a></td>
    <td>Evaluating expressions within Edebug.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Eval-List">Eval List</a></td>
    <td>Expressions whose values are displayed
                              each time you enter Edebug.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Printing-in-Edebug">Printing in Edebug</a></td>
    <td>Customization of printing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Trace-Buffer">Trace Buffer</a></td>
    <td>How to produce trace output in a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Coverage-Testing">Coverage Testing</a></td>
    <td>How to test evaluation coverage.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#The-Outside-Context">The Outside Context</a></td>
    <td>Data that Edebug saves and restores.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-and-Macros">Edebug and Macros</a></td>
    <td>Specifying how to handle macro calls.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Options">Edebug Options</a></td>
    <td>Option variables for customizing Edebug.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Breaks

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Breakpoints">Breakpoints</a></td>
    <td>Breakpoints at stop points.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Global-Break-Condition">Global Break Condition</a></td>
    <td>Breaking on an event.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Source-Breakpoints">Source Breakpoints</a></td>
    <td>Embedding breakpoints in source code.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">The Outside Context

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Checking-Whether-to-Stop">Checking Whether to Stop</a></td>
    <td>When Edebug decides what to do.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Display-Update">Edebug Display Update</a></td>
    <td>When Edebug updates the display.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Edebug-Recursive-Edit">Edebug Recursive Edit</a></td>
    <td>When Edebug stops execution.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Edebug and Macros

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Instrumenting-Macro-Calls">Instrumenting Macro Calls</a></td>
    <td>The basic problem.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Specification-List">Specification List</a></td>
    <td>How to specify complex patterns of evaluation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Backtracking">Backtracking</a></td>
    <td>What Edebug does when matching fails.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Specification-Examples">Specification Examples</a></td>
    <td>To help understand specifications.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Debugging Invalid Lisp Syntax

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Excess-Open">Excess Open</a></td>
    <td>How to find a spurious open paren or missing close.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Excess-Close">Excess Close</a></td>
    <td>How to find a spurious close paren or missing open.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Reading and Printing Lisp Objects

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Streams-Intro">Streams Intro</a></td>
    <td>Overview of streams, reading and printing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Input-Streams">Input Streams</a></td>
    <td>Various data types that can be used as
                              input streams.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Input-Functions">Input Functions</a></td>
    <td>Functions to read Lisp objects from text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Output-Streams">Output Streams</a></td>
    <td>Various data types that can be used as
                              output streams.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Output-Functions">Output Functions</a></td>
    <td>Functions to print Lisp objects as text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Output-Variables">Output Variables</a></td>
    <td>Variables that control what the printing
                              functions do.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Minibuffers

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Intro-to-Minibuffers">Intro to Minibuffers</a></td>
    <td>Basic information about minibuffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-from-Minibuffer">Text from Minibuffer</a></td>
    <td>How to read a straight text string.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Object-from-Minibuffer">Object from Minibuffer</a></td>
    <td>How to read a Lisp object or expression.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffer-History">Minibuffer History</a></td>
    <td>Recording previous minibuffer inputs
                              so the user can reuse them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Initial-Input">Initial Input</a></td>
    <td>Specifying initial contents for the minibuffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Completion">Completion</a></td>
    <td>How to invoke and customize completion.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Yes_002dor_002dNo-Queries">Yes-or-No Queries</a></td>
    <td>Asking a question with a simple answer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Multiple-Queries">Multiple Queries</a></td>
    <td>Asking a series of similar questions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Reading-a-Password">Reading a Password</a></td>
    <td>Reading a password from the terminal.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffer-Commands">Minibuffer Commands</a></td>
    <td>Commands used as key bindings in minibuffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffer-Windows">Minibuffer Windows</a></td>
    <td>Operating on the special minibuffer windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffer-Contents">Minibuffer Contents</a></td>
    <td>How such commands access the minibuffer text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Recursive-Mini">Recursive Mini</a></td>
    <td>Whether recursive entry to minibuffer is allowed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffer-Misc">Minibuffer Misc</a></td>
    <td>Various customization hooks and variables.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Completion

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Completion">Basic Completion</a></td>
    <td>Low-level functions for completing strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffer-Completion">Minibuffer Completion</a></td>
    <td>Invoking the minibuffer with completion.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Completion-Commands">Completion Commands</a></td>
    <td>Minibuffer commands that do completion.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#High_002dLevel-Completion">High-Level Completion</a></td>
    <td>Convenient special cases of completion
                              (reading buffer names, variable names, etc.).</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Reading-File-Names">Reading File Names</a></td>
    <td>Using completion to read file names and
                              shell commands.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Completion-Variables">Completion Variables</a></td>
    <td>Variables controlling completion behavior.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Programmed-Completion">Programmed Completion</a></td>
    <td>Writing your own completion function.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Completion-in-Buffers">Completion in Buffers</a></td>
    <td>Completing text in ordinary buffers.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Command Loop

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Command-Overview">Command Overview</a></td>
    <td>How the command loop reads commands.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Commands">Defining Commands</a></td>
    <td>Specifying how a function should read arguments.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Interactive-Call">Interactive Call</a></td>
    <td>Calling a command, so that it will read arguments.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Distinguish-Interactive">Distinguish Interactive</a></td>
    <td>Making a command distinguish interactive calls.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Command-Loop-Info">Command Loop Info</a></td>
    <td>Variables set by the command loop for you to examine.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Adjusting-Point">Adjusting Point</a></td>
    <td>Adjustment of point after a command.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Input-Events">Input Events</a></td>
    <td>What input looks like when you read it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Reading-Input">Reading Input</a></td>
    <td>How to read input events from the keyboard or mouse.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Special-Events">Special Events</a></td>
    <td>Events processed immediately and individually.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Waiting">Waiting</a></td>
    <td>Waiting for user input or elapsed time.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Quitting">Quitting</a></td>
    <td>How <kbd>C-g</kbd> works.  How to catch or defer quitting.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Prefix-Command-Arguments">Prefix Command Arguments</a></td>
    <td>How the commands to set prefix args work.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Recursive-Editing">Recursive Editing</a></td>
    <td>Entering a recursive edit,
                          and why you usually shouldn't.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Disabling-Commands">Disabling Commands</a></td>
    <td>How the command loop handles disabled commands.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Command-History">Command History</a></td>
    <td>How the command history is set up, and how accessed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keyboard-Macros">Keyboard Macros</a></td>
    <td>How keyboard macros are implemented.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Defining Commands

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Using-Interactive">Using Interactive</a></td>
    <td>General rules for <code>interactive</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Interactive-Codes">Interactive Codes</a></td>
    <td>The standard letter-codes for reading arguments
                              in various ways.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Interactive-Examples">Interactive Examples</a></td>
    <td>Examples of how to read interactive arguments.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Generic-Commands">Generic Commands</a></td>
    <td>Select among command alternatives.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Input Events

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Keyboard-Events">Keyboard Events</a></td>
    <td>Ordinary characters -- keys with symbols on them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Function-Keys">Function Keys</a></td>
    <td>Function keys -- keys with names, not symbols.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mouse-Events">Mouse Events</a></td>
    <td>Overview of mouse events.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Click-Events">Click Events</a></td>
    <td>Pushing and releasing a mouse button.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Drag-Events">Drag Events</a></td>
    <td>Moving the mouse before releasing the button.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Button_002dDown-Events">Button-Down Events</a></td>
    <td>A button was pushed and not yet released.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Repeat-Events">Repeat Events</a></td>
    <td>Double and triple click (or drag, or down).</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Motion-Events">Motion Events</a></td>
    <td>Just moving the mouse, not pushing a button.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Focus-Events">Focus Events</a></td>
    <td>Moving the mouse between frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Misc-Events">Misc Events</a></td>
    <td>Other events the system can generate.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Event-Examples">Event Examples</a></td>
    <td>Examples of the lists for mouse events.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Classifying-Events">Classifying Events</a></td>
    <td>Finding the modifier keys in an event symbol.
                              Event types.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Accessing-Mouse">Accessing Mouse</a></td>
    <td>Functions to extract info from mouse events.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Accessing-Scroll">Accessing Scroll</a></td>
    <td>Functions to get info from scroll bar events.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Strings-of-Events">Strings of Events</a></td>
    <td>Special considerations for putting
                              keyboard character events in a string.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Reading Input

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Key-Sequence-Input">Key Sequence Input</a></td>
    <td>How to read one key sequence.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Reading-One-Event">Reading One Event</a></td>
    <td>How to read just one event.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Event-Mod">Event Mod</a></td>
    <td>How Emacs modifies events as they are read.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Invoking-the-Input-Method">Invoking the Input Method</a></td>
    <td>How reading an event uses the input method.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Quoted-Character-Input">Quoted Character Input</a></td>
    <td>Asking the user to specify a character.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Event-Input-Misc">Event Input Misc</a></td>
    <td>How to reread or throw away input events.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Keymaps

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Key-Sequences">Key Sequences</a></td>
    <td>Key sequences as Lisp objects.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keymap-Basics">Keymap Basics</a></td>
    <td>Basic concepts of keymaps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Format-of-Keymaps">Format of Keymaps</a></td>
    <td>What a keymap looks like as a Lisp object.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Keymaps">Creating Keymaps</a></td>
    <td>Functions to create and copy keymaps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Inheritance-and-Keymaps">Inheritance and Keymaps</a></td>
    <td>How one keymap can inherit the bindings
                              of another keymap.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Prefix-Keys">Prefix Keys</a></td>
    <td>Defining a key with a keymap as its definition.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Active-Keymaps">Active Keymaps</a></td>
    <td>How Emacs searches the active keymaps
                              for a key binding.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Searching-Keymaps">Searching Keymaps</a></td>
    <td>A pseudo-Lisp summary of searching active maps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Controlling-Active-Maps">Controlling Active Maps</a></td>
    <td>Each buffer has a local keymap
                               to override the standard (global) bindings.
                               A minor mode can also override them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Key-Lookup">Key Lookup</a></td>
    <td>Finding a key's binding in one keymap.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Functions-for-Key-Lookup">Functions for Key Lookup</a></td>
    <td>How to request key lookup.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Changing-Key-Bindings">Changing Key Bindings</a></td>
    <td>Redefining a key in a keymap.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Remapping-Commands">Remapping Commands</a></td>
    <td>A keymap can translate one command to another.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Translation-Keymaps">Translation Keymaps</a></td>
    <td>Keymaps for translating sequences of events.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Key-Binding-Commands">Key Binding Commands</a></td>
    <td>Interactive interfaces for redefining keys.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Scanning-Keymaps">Scanning Keymaps</a></td>
    <td>Looking through all keymaps, for printing help.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Menu-Keymaps">Menu Keymaps</a></td>
    <td>Defining a menu as a keymap.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Menu Keymaps

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Menus">Defining Menus</a></td>
    <td>How to make a keymap that defines a menu.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mouse-Menus">Mouse Menus</a></td>
    <td>How users actuate the menu with the mouse.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keyboard-Menus">Keyboard Menus</a></td>
    <td>How users actuate the menu with the keyboard.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Menu-Example">Menu Example</a></td>
    <td>Making a simple menu.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Menu-Bar">Menu Bar</a></td>
    <td>How to customize the menu bar.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Tool-Bar">Tool Bar</a></td>
    <td>A tool bar is a row of images.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Modifying-Menus">Modifying Menus</a></td>
    <td>How to add new items to a menu.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Easy-Menu">Easy Menu</a></td>
    <td>A convenience macro for defining menus.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Defining Menus

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Simple-Menu-Items">Simple Menu Items</a></td>
    <td>A simple kind of menu key binding.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Extended-Menu-Items">Extended Menu Items</a></td>
    <td>More complex menu item definitions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Menu-Separators">Menu Separators</a></td>
    <td>Drawing a horizontal line through a menu.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Alias-Menu-Items">Alias Menu Items</a></td>
    <td>Using command aliases in menu items.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Major and Minor Modes

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Hooks">Hooks</a></td>
    <td>How to use hooks; how to write code that provides hooks.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Major-Modes">Major Modes</a></td>
    <td>Defining major modes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minor-Modes">Minor Modes</a></td>
    <td>Defining minor modes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Line-Format">Mode Line Format</a></td>
    <td>Customizing the text that appears in the mode line.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Imenu">Imenu</a></td>
    <td>Providing a menu of definitions made in a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Font-Lock-Mode">Font Lock Mode</a></td>
    <td>How modes can highlight text according to syntax.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Auto_002dIndentation">Auto-Indentation</a></td>
    <td>How to teach Emacs to indent for a major mode.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Desktop-Save-Mode">Desktop Save Mode</a></td>
    <td>How modes can have buffer state saved between
                         Emacs sessions.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Hooks

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Running-Hooks">Running Hooks</a></td>
    <td>How to run a hook.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Setting-Hooks">Setting Hooks</a></td>
    <td>How to put functions on a hook, or remove them.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Major Modes

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Major-Mode-Conventions">Major Mode Conventions</a></td>
    <td>Coding conventions for keymaps, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Auto-Major-Mode">Auto Major Mode</a></td>
    <td>How Emacs chooses the major mode automatically.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Help">Mode Help</a></td>
    <td>Finding out how to use a mode.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Derived-Modes">Derived Modes</a></td>
    <td>Defining a new major mode based on another major
                              mode.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Major-Modes">Basic Major Modes</a></td>
    <td>Modes that other modes are often derived from.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Hooks">Mode Hooks</a></td>
    <td>Hooks run at the end of major mode functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Tabulated-List-Mode">Tabulated List Mode</a></td>
    <td>Parent mode for buffers containing tabulated data.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Generic-Modes">Generic Modes</a></td>
    <td>Defining a simple major mode that supports
                              comment syntax and Font Lock mode.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Example-Major-Modes">Example Major Modes</a></td>
    <td>Text mode and Lisp modes.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Minor Modes

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Minor-Mode-Conventions">Minor Mode Conventions</a></td>
    <td>Tips for writing a minor mode.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keymaps-and-Minor-Modes">Keymaps and Minor Modes</a></td>
    <td>How a minor mode can have its own keymap.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Minor-Modes">Defining Minor Modes</a></td>
    <td>A convenient facility for defining minor modes.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Mode Line Format

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Line-Basics">Mode Line Basics</a></td>
    <td>Basic ideas of mode line control.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Line-Data">Mode Line Data</a></td>
    <td>The data structure that controls the mode line.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Line-Top">Mode Line Top</a></td>
    <td>The top level variable, mode-line-format.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode-Line-Variables">Mode Line Variables</a></td>
    <td>Variables used in that data structure.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#g_t_0025_002dConstructs">%-Constructs</a></td>
    <td>Putting information into a mode line.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Properties-in-Mode">Properties in Mode</a></td>
    <td>Using text properties in the mode line.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Header-Lines">Header Lines</a></td>
    <td>Like a mode line, but at the top.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Emulating-Mode-Line">Emulating Mode Line</a></td>
    <td>Formatting text as the mode line would.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Font Lock Mode

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Font-Lock-Basics">Font Lock Basics</a></td>
    <td>Overview of customizing Font Lock.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Search_002dbased-Fontification">Search-based Fontification</a></td>
    <td>Fontification based on regexps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Customizing-Keywords">Customizing Keywords</a></td>
    <td>Customizing search-based fontification.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Other-Font-Lock-Variables">Other Font Lock Variables</a></td>
    <td>Additional customization facilities.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Levels-of-Font-Lock">Levels of Font Lock</a></td>
    <td>Each mode can define alternative levels
                              so that the user can select more or less.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Precalculated-Fontification">Precalculated Fontification</a></td>
    <td>How Lisp programs that produce the buffer
                                  contents can also specify how to fontify it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Faces-for-Font-Lock">Faces for Font Lock</a></td>
    <td>Special faces specifically for Font Lock.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntactic-Font-Lock">Syntactic Font Lock</a></td>
    <td>Fontification based on syntax tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Multiline-Font-Lock">Multiline Font Lock</a></td>
    <td>How to coerce Font Lock into properly
                              highlighting multiline constructs.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Multiline Font Lock Constructs

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Font-Lock-Multiline">Font Lock Multiline</a></td>
    <td>Marking multiline chunks with a text property.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Region-to-Refontify">Region to Refontify</a></td>
    <td>Controlling which region gets refontified
                              after a buffer change.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Automatic Indentation of code

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE">SMIE</a></td>
    <td>A simple minded indentation engine.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Simple Minded Indentation Engine

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-setup">SMIE setup</a></td>
    <td>SMIE setup and features.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Operator-Precedence-Grammars">Operator Precedence Grammars</a></td>
    <td>A very simple parsing technique.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Grammar">SMIE Grammar</a></td>
    <td>Defining the grammar of a language.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Lexer">SMIE Lexer</a></td>
    <td>Defining tokens.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Tricks">SMIE Tricks</a></td>
    <td>Working around the parser's limitations.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Indentation">SMIE Indentation</a></td>
    <td>Specifying indentation rules.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Indentation-Helpers">SMIE Indentation Helpers</a></td>
    <td>Helper functions for indentation rules.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Indentation-Example">SMIE Indentation Example</a></td>
    <td>Sample indentation rules.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#SMIE-Customization">SMIE Customization</a></td>
    <td>Customizing indentation.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Documentation

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Documentation-Basics">Documentation Basics</a></td>
    <td>Where doc strings are defined and stored.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Accessing-Documentation">Accessing Documentation</a></td>
    <td>How Lisp programs can access doc strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Keys-in-Documentation">Keys in Documentation</a></td>
    <td>Substituting current key bindings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Quoting-Style">Text Quoting Style</a></td>
    <td>Quotation marks in doc strings and messages.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Describing-Characters">Describing Characters</a></td>
    <td>Making printable descriptions of
                              non-printing characters and key sequences.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Help-Functions">Help Functions</a></td>
    <td>Subroutines used by Emacs help facilities.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Files

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Visiting-Files">Visiting Files</a></td>
    <td>Reading files into Emacs buffers for editing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Saving-Buffers">Saving Buffers</a></td>
    <td>Writing changed buffers back into files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Reading-from-Files">Reading from Files</a></td>
    <td>Reading files into buffers without visiting.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Writing-to-Files">Writing to Files</a></td>
    <td>Writing new files from parts of buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Locks">File Locks</a></td>
    <td>Locking and unlocking files, to prevent
                              simultaneous editing by two people.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Information-about-Files">Information about Files</a></td>
    <td>Testing existence, accessibility, size of files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Changing-Files">Changing Files</a></td>
    <td>Renaming files, changing permissions, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Names">File Names</a></td>
    <td>Decomposing and expanding file names.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Contents-of-Directories">Contents of Directories</a></td>
    <td>Getting a list of the files in a directory.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Create_002fDelete-Dirs">Create/Delete Dirs</a></td>
    <td>Creating and Deleting Directories.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Magic-File-Names">Magic File Names</a></td>
    <td>Special handling for certain file names.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Format-Conversion">Format Conversion</a></td>
    <td>Conversion to and from various file formats.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Visiting Files

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Visiting-Functions">Visiting Functions</a></td>
    <td>The usual interface functions for visiting.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Subroutines-of-Visiting">Subroutines of Visiting</a></td>
    <td>Lower-level subroutines that they use.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Information about Files

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Testing-Accessibility">Testing Accessibility</a></td>
    <td>Is a given file readable?  Writable?</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Kinds-of-Files">Kinds of Files</a></td>
    <td>Is it a directory?  A symbolic link?</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Truenames">Truenames</a></td>
    <td>Eliminating symbolic links from a file name.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Attributes">File Attributes</a></td>
    <td>File sizes, modification times, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Extended-Attributes">Extended Attributes</a></td>
    <td>Extended file attributes for access control.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Locating-Files">Locating Files</a></td>
    <td>How to find a file in standard places.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">File Names

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#File-Name-Components">File Name Components</a></td>
    <td>The directory part of a file name, and the rest.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Relative-File-Names">Relative File Names</a></td>
    <td>Some file names are relative to a current directory.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Directory-Names">Directory Names</a></td>
    <td>A directory's name as a directory
                              is different from its name as a file.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Name-Expansion">File Name Expansion</a></td>
    <td>Converting relative file names to absolute ones.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Unique-File-Names">Unique File Names</a></td>
    <td>Generating names for temporary files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Name-Completion">File Name Completion</a></td>
    <td>Finding the completions for a given file name.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-File-Names">Standard File Names</a></td>
    <td>If your package uses a fixed file name,
                              how to handle various operating systems simply.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">File Format Conversion

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Format-Conversion-Overview">Format Conversion Overview</a></td>
    <td><code>insert-file-contents</code> and <code>write-region</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Format-Conversion-Round_002dTrip">Format Conversion Round-Trip</a></td>
    <td>Using <code>format-alist</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Format-Conversion-Piecemeal">Format Conversion Piecemeal</a></td>
    <td>Specifying non-paired conversion.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Backups and Auto-Saving

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Backup-Files">Backup Files</a></td>
    <td>How backup files are made; how their names
                              are chosen.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Auto_002dSaving">Auto-Saving</a></td>
    <td>How auto-save files are made; how their
                              names are chosen.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Reverting">Reverting</a></td>
    <td><code>revert-buffer</code>, and how to customize
                              what it does.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Backup Files

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Making-Backups">Making Backups</a></td>
    <td>How Emacs makes backup files, and when.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Rename-or-Copy">Rename or Copy</a></td>
    <td>Two alternatives: renaming the old file
                              or copying it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Numbered-Backups">Numbered Backups</a></td>
    <td>Keeping multiple backups for each source file.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Backup-Names">Backup Names</a></td>
    <td>How backup file names are computed; customization.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Buffers

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Basics">Buffer Basics</a></td>
    <td>What is a buffer?</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Current-Buffer">Current Buffer</a></td>
    <td>Designating a buffer as current
                              so that primitives will access its contents.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Names">Buffer Names</a></td>
    <td>Accessing and changing buffer names.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-File-Name">Buffer File Name</a></td>
    <td>The buffer file name indicates which file
                              is visited.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Modification">Buffer Modification</a></td>
    <td>A buffer is <dfn>modified</dfn> if it needs to be saved.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Modification-Time">Modification Time</a></td>
    <td>Determining whether the visited file was changed
                              behind Emacs's back.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Read-Only-Buffers">Read Only Buffers</a></td>
    <td>Modifying text is not allowed in a
                              read-only buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-List">Buffer List</a></td>
    <td>How to look at all the existing buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Buffers">Creating Buffers</a></td>
    <td>Functions that create buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Killing-Buffers">Killing Buffers</a></td>
    <td>Buffers exist until explicitly killed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Indirect-Buffers">Indirect Buffers</a></td>
    <td>An indirect buffer shares text with some
                              other buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Swapping-Text">Swapping Text</a></td>
    <td>Swapping text between two buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Gap">Buffer Gap</a></td>
    <td>The gap in the buffer.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Windows

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Windows">Basic Windows</a></td>
    <td>Basic information on using windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Windows-and-Frames">Windows and Frames</a></td>
    <td>Relating windows to the frame they appear on.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Sizes">Window Sizes</a></td>
    <td>Accessing a window's size.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Resizing-Windows">Resizing Windows</a></td>
    <td>Changing the sizes of windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Preserving-Window-Sizes">Preserving Window Sizes</a></td>
    <td>Preserving the size of windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Splitting-Windows">Splitting Windows</a></td>
    <td>Splitting one window into two windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Deleting-Windows">Deleting Windows</a></td>
    <td>Deleting a window gives its space to other windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Recombining-Windows">Recombining Windows</a></td>
    <td>Preserving the frame layout when splitting and
                              deleting windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Selecting-Windows">Selecting Windows</a></td>
    <td>The selected window is the one that you edit in.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Cyclic-Window-Ordering">Cyclic Window Ordering</a></td>
    <td>Moving around the existing windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffers-and-Windows">Buffers and Windows</a></td>
    <td>Each window displays the contents of a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Switching-Buffers">Switching Buffers</a></td>
    <td>Higher-level functions for switching to a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Displaying-Buffers">Displaying Buffers</a></td>
    <td>Displaying a buffer in a suitable window.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-History">Window History</a></td>
    <td>Each window remembers the buffers displayed in it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dedicated-Windows">Dedicated Windows</a></td>
    <td>How to avoid displaying another buffer in
                              a specific window.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Quitting-Windows">Quitting Windows</a></td>
    <td>How to restore the state prior to displaying a
                              buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Side-Windows">Side Windows</a></td>
    <td>Special windows on a frame's sides.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Atomic-Windows">Atomic Windows</a></td>
    <td>Preserving parts of the window layout.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Point">Window Point</a></td>
    <td>Each window has its own location of point.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Start-and-End">Window Start and End</a></td>
    <td>Buffer positions indicating which text is
                              on-screen in a window.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Textual-Scrolling">Textual Scrolling</a></td>
    <td>Moving text up and down through the window.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Vertical-Scrolling">Vertical Scrolling</a></td>
    <td>Moving the contents up and down on the window.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Horizontal-Scrolling">Horizontal Scrolling</a></td>
    <td>Moving the contents sideways on the window.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Coordinates-and-Windows">Coordinates and Windows</a></td>
    <td>Converting coordinates to windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mouse-Window-Auto_002dselection">Mouse Window Auto-selection</a></td>
    <td>Automatically selecting windows with the mouse.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Configurations">Window Configurations</a></td>
    <td>Saving and restoring the state of the screen.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Parameters">Window Parameters</a></td>
    <td>Associating additional information with windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Hooks">Window Hooks</a></td>
    <td>Hooks for scrolling, window size changes,
                              redisplay going past a certain point,
                              or window configuration changes.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Displaying Buffers

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Choosing-Window">Choosing Window</a></td>
    <td>How to choose a window for displaying a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Display-Action-Functions">Buffer Display Action Functions</a></td>
    <td>Support functions for buffer display.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Display-Action-Alists">Buffer Display Action Alists</a></td>
    <td>Alists for fine-tuning buffer display
                              action functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Choosing-Window-Options">Choosing Window Options</a></td>
    <td>Extra options affecting how buffers are displayed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Precedence-of-Action-Functions">Precedence of Action Functions</a></td>
    <td>A tutorial explaining the precedence of
                              buffer display action functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#The-Zen-of-Buffer-Display">The Zen of Buffer Display</a></td>
    <td>How to avoid that buffers get lost in between
                              windows.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Side Windows

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Displaying-Buffers-in-Side-Windows">Displaying Buffers in Side Windows</a></td>
    <td>An action function for displaying
                              buffers in side windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Side-Window-Options-and-Functions">Side Window Options and Functions</a></td>
    <td>Further tuning of side windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Layouts-with-Side-Windows">Frame Layouts with Side Windows</a></td>
    <td>Setting up frame layouts with side
                              windows.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Frames

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Frames">Creating Frames</a></td>
    <td>Creating additional frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Multiple-Terminals">Multiple Terminals</a></td>
    <td>Displaying on several different devices.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Geometry">Frame Geometry</a></td>
    <td>Geometric properties of frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Parameters">Frame Parameters</a></td>
    <td>Controlling frame size, position, font, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Terminal-Parameters">Terminal Parameters</a></td>
    <td>Parameters common for all frames on terminal.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Titles">Frame Titles</a></td>
    <td>Automatic updating of frame titles.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Deleting-Frames">Deleting Frames</a></td>
    <td>Frames last until explicitly deleted.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Finding-All-Frames">Finding All Frames</a></td>
    <td>How to examine all existing frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Minibuffers-and-Frames">Minibuffers and Frames</a></td>
    <td>How a frame finds the minibuffer to use.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Input-Focus">Input Focus</a></td>
    <td>Specifying the selected frame.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Visibility-of-Frames">Visibility of Frames</a></td>
    <td>Frames may be visible or invisible, or icons.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Raising-and-Lowering">Raising and Lowering</a></td>
    <td>Raising, Lowering and Restacking Frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Configurations">Frame Configurations</a></td>
    <td>Saving the state of all frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Child-Frames">Child Frames</a></td>
    <td>Making a frame the child of another.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mouse-Tracking">Mouse Tracking</a></td>
    <td>Getting events that say when the mouse moves.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mouse-Position">Mouse Position</a></td>
    <td>Asking where the mouse is, or moving it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Pop_002dUp-Menus">Pop-Up Menus</a></td>
    <td>Displaying a menu for the user to select from.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dialog-Boxes">Dialog Boxes</a></td>
    <td>Displaying a box to ask yes or no.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Pointer-Shape">Pointer Shape</a></td>
    <td>Specifying the shape of the mouse pointer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-System-Selections">Window System Selections</a></td>
    <td>Transferring text to and from other X clients.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Drag-and-Drop">Drag and Drop</a></td>
    <td>Internals of Drag-and-Drop implementation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Color-Names">Color Names</a></td>
    <td>Getting the definitions of color names.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Terminal-Colors">Text Terminal Colors</a></td>
    <td>Defining colors for text terminals.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Resources">Resources</a></td>
    <td>Getting resource values from the server.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Display-Feature-Testing">Display Feature Testing</a></td>
    <td>Determining the features of a terminal.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Frame Geometry

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Layout">Frame Layout</a></td>
    <td>Basic layout of frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Font">Frame Font</a></td>
    <td>The default font of a frame and how to set it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Position">Frame Position</a></td>
    <td>The position of a frame on its display.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Size">Frame Size</a></td>
    <td>Specifying and retrieving a frame's size.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Implied-Frame-Resizing">Implied Frame Resizing</a></td>
    <td>Implied resizing of frames and how to prevent it.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Frame Parameters

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Parameter-Access">Parameter Access</a></td>
    <td>How to change a frame's parameters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Initial-Parameters">Initial Parameters</a></td>
    <td>Specifying frame parameters when you make a frame.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Frame-Parameters">Window Frame Parameters</a></td>
    <td>List of frame parameters for window systems.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Geometry">Geometry</a></td>
    <td>Parsing geometry specifications.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Window Frame Parameters

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Parameters">Basic Parameters</a></td>
    <td>Parameters that are fundamental.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Position-Parameters">Position Parameters</a></td>
    <td>The position of the frame on the screen.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Size-Parameters">Size Parameters</a></td>
    <td>Frame's size.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Layout-Parameters">Layout Parameters</a></td>
    <td>Size of parts of the frame, and
                              enabling or disabling some parts.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Parameters">Buffer Parameters</a></td>
    <td>Which buffers have been or should be shown.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Frame-Interaction-Parameters">Frame Interaction Parameters</a></td>
    <td>Parameters for interacting with other
                              frames.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mouse-Dragging-Parameters">Mouse Dragging Parameters</a></td>
    <td>Parameters for resizing and moving
                              frames with the mouse.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Management-Parameters">Management Parameters</a></td>
    <td>Communicating with the window manager.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Cursor-Parameters">Cursor Parameters</a></td>
    <td>Controlling the cursor appearance.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Font-and-Color-Parameters">Font and Color Parameters</a></td>
    <td>Fonts and colors for the frame text.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Positions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Point">Point</a></td>
    <td>The special position where editing takes place.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Motion">Motion</a></td>
    <td>Changing point.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Excursions">Excursions</a></td>
    <td>Temporary motion and buffer changes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Narrowing">Narrowing</a></td>
    <td>Restricting editing to a portion of the buffer.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Motion

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Character-Motion">Character Motion</a></td>
    <td>Moving in terms of characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Word-Motion">Word Motion</a></td>
    <td>Moving in terms of words.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-End-Motion">Buffer End Motion</a></td>
    <td>Moving to the beginning or end of the buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Lines">Text Lines</a></td>
    <td>Moving in terms of lines of text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Screen-Lines">Screen Lines</a></td>
    <td>Moving in terms of lines as displayed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#List-Motion">List Motion</a></td>
    <td>Moving by parsing lists and sexps.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Skipping-Characters">Skipping Characters</a></td>
    <td>Skipping characters belonging to a certain set.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Markers

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Overview-of-Markers">Overview of Markers</a></td>
    <td>The components of a marker, and how it relocates.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Predicates-on-Markers">Predicates on Markers</a></td>
    <td>Testing whether an object is a marker.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Creating-Markers">Creating Markers</a></td>
    <td>Making empty markers or markers at certain places.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Information-from-Markers">Information from Markers</a></td>
    <td>Finding the marker's buffer or character position.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Marker-Insertion-Types">Marker Insertion Types</a></td>
    <td>Two ways a marker can relocate when you
                              insert where it points.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Moving-Markers">Moving Markers</a></td>
    <td>Moving the marker to a new buffer or position.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#The-Mark">The Mark</a></td>
    <td>How the mark is implemented with a marker.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#The-Region">The Region</a></td>
    <td>How to access the region.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Text

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Near-Point">Near Point</a></td>
    <td>Examining text in the vicinity of point.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Contents">Buffer Contents</a></td>
    <td>Examining text in a general fashion.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Comparing-Text">Comparing Text</a></td>
    <td>Comparing substrings of buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Insertion">Insertion</a></td>
    <td>Adding new text to a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Commands-for-Insertion">Commands for Insertion</a></td>
    <td>User-level commands to insert text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Deletion">Deletion</a></td>
    <td>Removing text from a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#User_002dLevel-Deletion">User-Level Deletion</a></td>
    <td>User-level commands to delete text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#The-Kill-Ring">The Kill Ring</a></td>
    <td>Where removed text sometimes is saved for
                              later use.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Undo">Undo</a></td>
    <td>Undoing changes to the text of a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Maintaining-Undo">Maintaining Undo</a></td>
    <td>How to enable and disable undo information.
                              How to control how much information is kept.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Filling">Filling</a></td>
    <td>Functions for explicit filling.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Margins">Margins</a></td>
    <td>How to specify margins for filling commands.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Adaptive-Fill">Adaptive Fill</a></td>
    <td>Adaptive Fill mode chooses a fill prefix
                              from context.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Auto-Filling">Auto Filling</a></td>
    <td>How auto-fill mode is implemented to break lines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sorting">Sorting</a></td>
    <td>Functions for sorting parts of the buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Columns">Columns</a></td>
    <td>Computing horizontal positions, and using them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Indentation">Indentation</a></td>
    <td>Functions to insert or adjust indentation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Case-Changes">Case Changes</a></td>
    <td>Case conversion of parts of the buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Properties">Text Properties</a></td>
    <td>Assigning Lisp property lists to text characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Substitution">Substitution</a></td>
    <td>Replacing a given character wherever it appears.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Registers">Registers</a></td>
    <td>How registers are implemented.  Accessing
                              the text or position stored in a register.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Transposition">Transposition</a></td>
    <td>Swapping two portions of a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Decompression">Decompression</a></td>
    <td>Dealing with compressed data.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Base-64">Base 64</a></td>
    <td>Conversion to or from base 64 encoding.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Checksum_002fHash">Checksum/Hash</a></td>
    <td>Computing cryptographic hashes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#GnuTLS-Cryptography">GnuTLS Cryptography</a></td>
    <td>Cryptographic algorithms imported from GnuTLS.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Parsing-HTML_002fXML">Parsing HTML/XML</a></td>
    <td>Parsing HTML and XML.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Atomic-Changes">Atomic Changes</a></td>
    <td>Installing several buffer changes atomically.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Change-Hooks">Change Hooks</a></td>
    <td>Supplying functions to be run when text is changed.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">The Kill Ring

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Kill-Ring-Concepts">Kill Ring Concepts</a></td>
    <td>What text looks like in the kill ring.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Kill-Functions">Kill Functions</a></td>
    <td>Functions that kill text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Yanking">Yanking</a></td>
    <td>How yanking is done.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Yank-Commands">Yank Commands</a></td>
    <td>Commands that access the kill ring.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Low_002dLevel-Kill-Ring">Low-Level Kill Ring</a></td>
    <td>Functions and variables for kill ring access.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Internals-of-Kill-Ring">Internals of Kill Ring</a></td>
    <td>Variables that hold kill ring data.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Indentation

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Primitive-Indent">Primitive Indent</a></td>
    <td>Functions used to count and insert indentation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mode_002dSpecific-Indent">Mode-Specific Indent</a></td>
    <td>Customize indentation for different modes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Region-Indent">Region Indent</a></td>
    <td>Indent all the lines in a region.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Relative-Indent">Relative Indent</a></td>
    <td>Indent the current line based on previous lines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Indent-Tabs">Indent Tabs</a></td>
    <td>Adjustable, typewriter-like tab stops.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Motion-by-Indent">Motion by Indent</a></td>
    <td>Move to first non-blank character.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Text Properties

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Examining-Properties">Examining Properties</a></td>
    <td>Looking at the properties of one character.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Changing-Properties">Changing Properties</a></td>
    <td>Setting the properties of a range of text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Property-Search">Property Search</a></td>
    <td>Searching for where a property changes value.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Special-Properties">Special Properties</a></td>
    <td>Particular properties with special meanings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Format-Properties">Format Properties</a></td>
    <td>Properties for representing formatting of text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sticky-Properties">Sticky Properties</a></td>
    <td>How inserted text gets properties from
                              neighboring text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lazy-Properties">Lazy Properties</a></td>
    <td>Computing text properties in a lazy fashion
                              only when text is examined.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Clickable-Text">Clickable Text</a></td>
    <td>Using text properties to make regions of text
                              do something when you click on them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Fields">Fields</a></td>
    <td>The <code>field</code> property defines
                              fields within the buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Not-Intervals">Not Intervals</a></td>
    <td>Why text properties do not use
                              Lisp-visible text intervals.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Parsing HTML and XML

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Document-Object-Model">Document Object Model</a></td>
    <td>Access, manipulate and search the <acronym>DOM</acronym>.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Non-<acronym>ASCII</acronym> Characters

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Text-Representations">Text Representations</a></td>
    <td>How Emacs represents text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Disabling-Multibyte">Disabling Multibyte</a></td>
    <td>Controlling whether to use multibyte characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Converting-Representations">Converting Representations</a></td>
    <td>Converting unibyte to multibyte and vice versa.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Selecting-a-Representation">Selecting a Representation</a></td>
    <td>Treating a byte sequence as unibyte or multi.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Character-Codes">Character Codes</a></td>
    <td>How unibyte and multibyte relate to
                                codes of individual characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Character-Properties">Character Properties</a></td>
    <td>Character attributes that define their
                                behavior and handling.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Character-Sets">Character Sets</a></td>
    <td>The space of possible character codes
                                is divided into various character sets.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Scanning-Charsets">Scanning Charsets</a></td>
    <td>Which character sets are used in a buffer?</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Translation-of-Characters">Translation of Characters</a></td>
    <td>Translation tables are used for conversion.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Coding-Systems">Coding Systems</a></td>
    <td>Coding systems are conversions for saving files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Input-Methods">Input Methods</a></td>
    <td>Input methods allow users to enter various
                                non-ASCII characters without special keyboards.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Locales">Locales</a></td>
    <td>Interacting with the POSIX locale.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Coding Systems

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Coding-System-Basics">Coding System Basics</a></td>
    <td>Basic concepts.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Encoding-and-I_002fO">Encoding and I/O</a></td>
    <td>How file I/O functions handle coding systems.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Lisp-and-Coding-Systems">Lisp and Coding Systems</a></td>
    <td>Functions to operate on coding system names.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#User_002dChosen-Coding-Systems">User-Chosen Coding Systems</a></td>
    <td>Asking the user to choose a coding system.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Default-Coding-Systems">Default Coding Systems</a></td>
    <td>Controlling the default choices.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Specifying-Coding-Systems">Specifying Coding Systems</a></td>
    <td>Requesting a particular coding system
                                    for a single file operation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Explicit-Encoding">Explicit Encoding</a></td>
    <td>Encoding or decoding text without doing I/O.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Terminal-I_002fO-Encoding">Terminal I/O Encoding</a></td>
    <td>Use of encoding for terminal I/O.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Searching and Matching

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#String-Search">String Search</a></td>
    <td>Search for an exact match.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Searching-and-Case">Searching and Case</a></td>
    <td>Case-independent or case-significant searching.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Regular-Expressions">Regular Expressions</a></td>
    <td>Describing classes of strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Regexp-Search">Regexp Search</a></td>
    <td>Searching for a match for a regexp.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#POSIX-Regexps">POSIX Regexps</a></td>
    <td>Searching POSIX-style for the longest match.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Match-Data">Match Data</a></td>
    <td>Finding out which part of the text matched,
                              after a string or regexp search.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Search-and-Replace">Search and Replace</a></td>
    <td>Commands that loop, searching and replacing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-Regexps">Standard Regexps</a></td>
    <td>Useful regexps for finding sentences, pages,...

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Regular Expressions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-of-Regexps">Syntax of Regexps</a></td>
    <td>Rules for writing regular expressions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Regexp-Example">Regexp Example</a></td>
    <td>Illustrates regular expression syntax.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Regexp-Functions">Regexp Functions</a></td>
    <td>Functions for operating on regular expressions.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Syntax of Regular Expressions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Regexp-Special">Regexp Special</a></td>
    <td>Special characters in regular expressions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Char-Classes">Char Classes</a></td>
    <td>Character classes used in regular expressions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Regexp-Backslash">Regexp Backslash</a></td>
    <td>Backslash-sequences in regular expressions.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">The Match Data

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Replacing-Match">Replacing Match</a></td>
    <td>Replacing a substring that was matched.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Simple-Match-Data">Simple Match Data</a></td>
    <td>Accessing single items of match data,
                              such as where a particular subexpression started.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Entire-Match-Data">Entire Match Data</a></td>
    <td>Accessing the entire match data at once, as a list.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Saving-Match-Data">Saving Match Data</a></td>
    <td>Saving and restoring the match data.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Syntax Tables

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Basics">Syntax Basics</a></td>
    <td>Basic concepts of syntax tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Descriptors">Syntax Descriptors</a></td>
    <td>How characters are classified.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Table-Functions">Syntax Table Functions</a></td>
    <td>How to create, examine and alter syntax tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Properties">Syntax Properties</a></td>
    <td>Overriding syntax with text properties.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Motion-and-Syntax">Motion and Syntax</a></td>
    <td>Moving over characters with certain syntaxes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Parsing-Expressions">Parsing Expressions</a></td>
    <td>Parsing balanced expressions
                              using the syntax table.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Table-Internals">Syntax Table Internals</a></td>
    <td>How syntax table information is stored.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Categories">Categories</a></td>
    <td>Another way of classifying character syntax.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Syntax Descriptors

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Class-Table">Syntax Class Table</a></td>
    <td>Table of syntax classes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Syntax-Flags">Syntax Flags</a></td>
    <td>Additional flags each character can have.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Parsing Expressions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Motion-via-Parsing">Motion via Parsing</a></td>
    <td>Motion functions that work by parsing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Position-Parse">Position Parse</a></td>
    <td>Determining the syntactic state of a position.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Parser-State">Parser State</a></td>
    <td>How Emacs represents a syntactic state.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Low_002dLevel-Parsing">Low-Level Parsing</a></td>
    <td>Parsing across a specified region.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Control-Parsing">Control Parsing</a></td>
    <td>Parameters that affect parsing.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Abbrevs and Abbrev Expansion

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Abbrev-Tables">Abbrev Tables</a></td>
    <td>Creating and working with abbrev tables.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Abbrevs">Defining Abbrevs</a></td>
    <td>Specifying abbreviations and their expansions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abbrev-Files">Abbrev Files</a></td>
    <td>Saving abbrevs in files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abbrev-Expansion">Abbrev Expansion</a></td>
    <td>Controlling expansion; expansion subroutines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Standard-Abbrev-Tables">Standard Abbrev Tables</a></td>
    <td>Abbrev tables used by various major modes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abbrev-Properties">Abbrev Properties</a></td>
    <td>How to read and set abbrev properties.
                            Which properties have which effect.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abbrev-Table-Properties">Abbrev Table Properties</a></td>
    <td>How to read and set abbrev table properties.
                            Which properties have which effect.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Threads

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Thread-Functions">Basic Thread Functions</a></td>
    <td>Basic thread functions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Mutexes">Mutexes</a></td>
    <td>Mutexes allow exclusive access to data.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Condition-Variables">Condition Variables</a></td>
    <td>Inter-thread events.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Processes

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Subprocess-Creation">Subprocess Creation</a></td>
    <td>Functions that start subprocesses.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Shell-Arguments">Shell Arguments</a></td>
    <td>Quoting an argument to pass it to a shell.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Synchronous-Processes">Synchronous Processes</a></td>
    <td>Details of using synchronous subprocesses.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Asynchronous-Processes">Asynchronous Processes</a></td>
    <td>Starting up an asynchronous subprocess.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Deleting-Processes">Deleting Processes</a></td>
    <td>Eliminating an asynchronous subprocess.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Process-Information">Process Information</a></td>
    <td>Accessing run-status and other attributes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Input-to-Processes">Input to Processes</a></td>
    <td>Sending input to an asynchronous subprocess.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Signals-to-Processes">Signals to Processes</a></td>
    <td>Stopping, continuing or interrupting
                              an asynchronous subprocess.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Output-from-Processes">Output from Processes</a></td>
    <td>Collecting output from an asynchronous subprocess.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sentinels">Sentinels</a></td>
    <td>Sentinels run when process run-status changes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Query-Before-Exit">Query Before Exit</a></td>
    <td>Whether to query if exiting will kill a process.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#System-Processes">System Processes</a></td>
    <td>Accessing other processes running on your system.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Transaction-Queues">Transaction Queues</a></td>
    <td>Transaction-based communication with subprocesses.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Network">Network</a></td>
    <td>Opening network connections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Network-Servers">Network Servers</a></td>
    <td>Network servers let Emacs accept net connections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Datagrams">Datagrams</a></td>
    <td>UDP network connections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Low_002dLevel-Network">Low-Level Network</a></td>
    <td>Lower-level but more general function
                              to create connections and servers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Misc-Network">Misc Network</a></td>
    <td>Additional relevant functions for net connections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Serial-Ports">Serial Ports</a></td>
    <td>Communicating with serial ports.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Byte-Packing">Byte Packing</a></td>
    <td>Using bindat to pack and unpack binary data.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Receiving Output from Processes

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Process-Buffers">Process Buffers</a></td>
    <td>By default, output is put in a buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Filter-Functions">Filter Functions</a></td>
    <td>Filter functions accept output from the process.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Decoding-Output">Decoding Output</a></td>
    <td>Filters can get unibyte or multibyte strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Accepting-Output">Accepting Output</a></td>
    <td>How to wait until process output arrives.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Low-Level Network Access

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Network-Processes">Network Processes</a></td>
    <td>Using <code>make-network-process</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Network-Options">Network Options</a></td>
    <td>Further control over network connections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Network-Feature-Testing">Network Feature Testing</a></td>
    <td>Determining which network features work on
                              the machine you are using.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Packing and Unpacking Byte Arrays

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Bindat-Spec">Bindat Spec</a></td>
    <td>Describing data layout.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Bindat-Functions">Bindat Functions</a></td>
    <td>Doing the unpacking and packing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Bindat-Examples">Bindat Examples</a></td>
    <td>Samples of what bindat.el can do for you!

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Emacs Display

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Refresh-Screen">Refresh Screen</a></td>
    <td>Clearing the screen and redrawing everything on it.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Forcing-Redisplay">Forcing Redisplay</a></td>
    <td>Forcing redisplay.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Truncation">Truncation</a></td>
    <td>Folding or wrapping long text lines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#The-Echo-Area">The Echo Area</a></td>
    <td>Displaying messages at the bottom of the screen.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Warnings">Warnings</a></td>
    <td>Displaying warning messages for the user.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Invisible-Text">Invisible Text</a></td>
    <td>Hiding part of the buffer text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Selective-Display">Selective Display</a></td>
    <td>Hiding part of the buffer text (the old way).</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Temporary-Displays">Temporary Displays</a></td>
    <td>Displays that go away automatically.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Overlays">Overlays</a></td>
    <td>Use overlays to highlight parts of the buffer.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Size-of-Displayed-Text">Size of Displayed Text</a></td>
    <td>How large displayed text is.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Line-Height">Line Height</a></td>
    <td>Controlling the height of lines.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Faces">Faces</a></td>
    <td>A face defines a graphics style
                              for text characters: font, colors, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Fringes">Fringes</a></td>
    <td>Controlling window fringes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Scroll-Bars">Scroll Bars</a></td>
    <td>Controlling scroll bars.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Dividers">Window Dividers</a></td>
    <td>Separating windows visually.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Display-Property">Display Property</a></td>
    <td>Enabling special display features.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Images">Images</a></td>
    <td>Displaying images in Emacs buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Buttons">Buttons</a></td>
    <td>Adding clickable buttons to Emacs buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abstract-Display">Abstract Display</a></td>
    <td>Emacs's Widget for Object Collections.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Blinking">Blinking</a></td>
    <td>How Emacs shows the matching open parenthesis.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Character-Display">Character Display</a></td>
    <td>How Emacs displays individual characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Beeping">Beeping</a></td>
    <td>Audible signal to the user.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Systems">Window Systems</a></td>
    <td>Which window system is being used.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Tooltips">Tooltips</a></td>
    <td>Tooltip display in Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Bidirectional-Display">Bidirectional Display</a></td>
    <td>Display of bidirectional scripts, such as
                              Arabic and Farsi.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">The Echo Area

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Displaying-Messages">Displaying Messages</a></td>
    <td>Explicitly displaying text in the echo area.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Progress">Progress</a></td>
    <td>Informing user about progress of a long operation.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Logging-Messages">Logging Messages</a></td>
    <td>Echo area messages are logged for the user.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Echo-Area-Customization">Echo Area Customization</a></td>
    <td>Controlling the echo area.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Reporting Warnings

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Warning-Basics">Warning Basics</a></td>
    <td>Warnings concepts and functions to report them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Warning-Variables">Warning Variables</a></td>
    <td>Variables programs bind to customize
                              their warnings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Warning-Options">Warning Options</a></td>
    <td>Variables users set to control display of warnings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Delayed-Warnings">Delayed Warnings</a></td>
    <td>Deferring a warning until the end of a command.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Overlays

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Managing-Overlays">Managing Overlays</a></td>
    <td>Creating and moving overlays.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Overlay-Properties">Overlay Properties</a></td>
    <td>How to read and set properties.
                              What properties do to the screen display.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Finding-Overlays">Finding Overlays</a></td>
    <td>Searching for overlays.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Faces

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Face-Attributes">Face Attributes</a></td>
    <td>What is in a face?</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Faces">Defining Faces</a></td>
    <td>How to define a face.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Attribute-Functions">Attribute Functions</a></td>
    <td>Functions to examine and set face attributes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Displaying-Faces">Displaying Faces</a></td>
    <td>How Emacs combines the faces specified for
                              a character.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Face-Remapping">Face Remapping</a></td>
    <td>Remapping faces to alternative definitions.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Face-Functions">Face Functions</a></td>
    <td>How to define and examine faces.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Auto-Faces">Auto Faces</a></td>
    <td>Hook for automatic face assignment.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Basic-Faces">Basic Faces</a></td>
    <td>Faces that are defined by default.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Font-Selection">Font Selection</a></td>
    <td>Finding the best available font for a face.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Font-Lookup">Font Lookup</a></td>
    <td>Looking up the names of available fonts
                              and information about them.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Fontsets">Fontsets</a></td>
    <td>A fontset is a collection of fonts
                              that handle a range of character sets.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Low_002dLevel-Font">Low-Level Font</a></td>
    <td>Lisp representation for character display fonts.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Fringes

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Fringe-Size_002fPos">Fringe Size/Pos</a></td>
    <td>Specifying where to put the window fringes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Fringe-Indicators">Fringe Indicators</a></td>
    <td>Displaying indicator icons in the window fringes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Fringe-Cursors">Fringe Cursors</a></td>
    <td>Displaying cursors in the right fringe.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Fringe-Bitmaps">Fringe Bitmaps</a></td>
    <td>Specifying bitmaps for fringe indicators.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Customizing-Bitmaps">Customizing Bitmaps</a></td>
    <td>Specifying your own bitmaps to use in the fringes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Overlay-Arrow">Overlay Arrow</a></td>
    <td>Display of an arrow to indicate position.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">The <code>display</code> Property

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Replacing-Specs">Replacing Specs</a></td>
    <td>Display specs that replace the text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Specified-Space">Specified Space</a></td>
    <td>Displaying one space with a specified width.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Pixel-Specification">Pixel Specification</a></td>
    <td>Specifying space width or height in pixels.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Other-Display-Specs">Other Display Specs</a></td>
    <td>Displaying an image; adjusting the height,
                              spacing, and other properties of text.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Display-Margins">Display Margins</a></td>
    <td>Displaying text or images to the side of
                              the main text.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Images

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Image-Formats">Image Formats</a></td>
    <td>Supported image formats.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Image-Descriptors">Image Descriptors</a></td>
    <td>How to specify an image for use in <code>:display</code>.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#XBM-Images">XBM Images</a></td>
    <td>Special features for XBM format.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#XPM-Images">XPM Images</a></td>
    <td>Special features for XPM format.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#ImageMagick-Images">ImageMagick Images</a></td>
    <td>Special features available through ImageMagick.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Other-Image-Types">Other Image Types</a></td>
    <td>Various other formats are supported.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Defining-Images">Defining Images</a></td>
    <td>Convenient ways to define an image for later use.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Showing-Images">Showing Images</a></td>
    <td>Convenient ways to display an image once
                              it is defined.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Multi_002dFrame-Images">Multi-Frame Images</a></td>
    <td>Some images contain more than one frame.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Image-Cache">Image Cache</a></td>
    <td>Internal mechanisms of image display.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Buttons

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Button-Properties">Button Properties</a></td>
    <td>Button properties with special meanings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Button-Types">Button Types</a></td>
    <td>Defining common properties for classes of buttons.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Making-Buttons">Making Buttons</a></td>
    <td>Adding buttons to Emacs buffers.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Manipulating-Buttons">Manipulating Buttons</a></td>
    <td>Getting and setting properties of buttons.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Button-Buffer-Commands">Button Buffer Commands</a></td>
    <td>Buffer-wide commands and bindings for buttons.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Abstract Display

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Abstract-Display-Functions">Abstract Display Functions</a></td>
    <td>Functions in the Ewoc package.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Abstract-Display-Example">Abstract Display Example</a></td>
    <td>Example of using Ewoc.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Character Display

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Usual-Display">Usual Display</a></td>
    <td>The usual conventions for displaying characters.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Display-Tables">Display Tables</a></td>
    <td>What a display table consists of.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Active-Display-Table">Active Display Table</a></td>
    <td>How Emacs selects a display table to use.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Glyphs">Glyphs</a></td>
    <td>How to define a glyph, and what glyphs mean.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Glyphless-Chars">Glyphless Chars</a></td>
    <td>How glyphless characters are drawn.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Operating System Interface

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Starting-Up">Starting Up</a></td>
    <td>Customizing Emacs startup processing.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Getting-Out">Getting Out</a></td>
    <td>How exiting works (permanent or temporary).</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#System-Environment">System Environment</a></td>
    <td>Distinguish the name and kind of system.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#User-Identification">User Identification</a></td>
    <td>Finding the name and user id of the user.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Time-of-Day">Time of Day</a></td>
    <td>Getting the current time.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Time-Conversion">Time Conversion</a></td>
    <td>Converting a time from numeric form to
                              calendrical data and vice versa.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Time-Parsing">Time Parsing</a></td>
    <td>Converting a time from numeric form to text
                              and vice versa.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Processor-Run-Time">Processor Run Time</a></td>
    <td>Getting the run time used by Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Time-Calculations">Time Calculations</a></td>
    <td>Adding, subtracting, comparing times, etc.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Timers">Timers</a></td>
    <td>Setting a timer to call a function at a
                              certain time.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Idle-Timers">Idle Timers</a></td>
    <td>Setting a timer to call a function when Emacs has
                              been idle for a certain length of time.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Terminal-Input">Terminal Input</a></td>
    <td>Accessing and recording terminal input.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Terminal-Output">Terminal Output</a></td>
    <td>Controlling and recording terminal output.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Sound-Output">Sound Output</a></td>
    <td>Playing sounds on the computer's speaker.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#X11-Keysyms">X11 Keysyms</a></td>
    <td>Operating on key symbols for X Windows.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Batch-Mode">Batch Mode</a></td>
    <td>Running Emacs without terminal interaction.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Session-Management">Session Management</a></td>
    <td>Saving and restoring state with
                              X Session Management.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Desktop-Notifications">Desktop Notifications</a></td>
    <td>Desktop notifications.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#File-Notifications">File Notifications</a></td>
    <td>File notifications.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Dynamic-Libraries">Dynamic Libraries</a></td>
    <td>On-demand loading of support libraries.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Security-Considerations">Security Considerations</a></td>
    <td>Running Emacs in an unfriendly environment.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Starting Up Emacs

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Startup-Summary">Startup Summary</a></td>
    <td>Sequence of actions Emacs performs at startup.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Init-File">Init File</a></td>
    <td>Details on reading the init file.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Terminal_002dSpecific">Terminal-Specific</a></td>
    <td>How the terminal-specific Lisp file is read.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Command_002dLine-Arguments">Command-Line Arguments</a></td>
    <td>How command-line arguments are processed,
                              and how you can customize them.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Getting Out of Emacs

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Killing-Emacs">Killing Emacs</a></td>
    <td>Exiting Emacs irreversibly.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Suspending-Emacs">Suspending Emacs</a></td>
    <td>Exiting Emacs reversibly.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Terminal Input

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Input-Modes">Input Modes</a></td>
    <td>Options for how input is processed.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Recording-Input">Recording Input</a></td>
    <td>Saving histories of recent or all input events.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Preparing Lisp code for distribution

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Packaging-Basics">Packaging Basics</a></td>
    <td>The basic concepts of Emacs Lisp packages.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Simple-Packages">Simple Packages</a></td>
    <td>How to package a single .el file.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Multi_002dfile-Packages">Multi-file Packages</a></td>
    <td>How to package multiple files.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Package-Archives">Package Archives</a></td>
    <td>Maintaining package archives.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Tips and Conventions

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Coding-Conventions">Coding Conventions</a></td>
    <td>Conventions for clean and robust programs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Key-Binding-Conventions">Key Binding Conventions</a></td>
    <td>Which keys should be bound by which programs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Programming-Tips">Programming Tips</a></td>
    <td>Making Emacs code fit smoothly in Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Compilation-Tips">Compilation Tips</a></td>
    <td>Making compiled code run fast.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Warning-Tips">Warning Tips</a></td>
    <td>Turning off compiler warnings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Documentation-Tips">Documentation Tips</a></td>
    <td>Writing readable documentation strings.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Comment-Tips">Comment Tips</a></td>
    <td>Conventions for writing comments.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Library-Headers">Library Headers</a></td>
    <td>Standard headers for library packages.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">GNU Emacs Internals

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Building-Emacs">Building Emacs</a></td>
    <td>How the dumped Emacs is made.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Pure-Storage">Pure Storage</a></td>
    <td>Kludge to make preloaded Lisp functions shareable.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Garbage-Collection">Garbage Collection</a></td>
    <td>Reclaiming space for Lisp objects no longer used.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Stack_002dallocated-Objects">Stack-allocated Objects</a></td>
    <td>Temporary conses and strings on C stack.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Memory-Usage">Memory Usage</a></td>
    <td>Info about total size of Lisp objects made so far.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#C-Dialect">C Dialect</a></td>
    <td>What C variant Emacs is written in.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Writing-Emacs-Primitives">Writing Emacs Primitives</a></td>
    <td>Writing C code for Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Writing-Dynamic-Modules">Writing Dynamic Modules</a></td>
    <td>Writing loadable modules for Emacs.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Object-Internals">Object Internals</a></td>
    <td>Data formats of buffers, windows, processes.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#C-Integer-Types">C Integer Types</a></td>
    <td>How C integer types are used inside Emacs.

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Writing Dynamic Modules

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Module-Initialization">Module Initialization</a></td>
    <td></td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Module-Functions">Module Functions</a></td>
    <td></td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Module-Values">Module Values</a></td>
    <td></td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Module-Misc">Module Misc</a></td>
    <td></td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Module-Nonlocal">Module Nonlocal</a></td>
    <td>

  </td></tr>  <tr>
    <th colspan="2" style="text-align:left" align="left">Object Internals

  </th></tr>
  <tr>
    <td bgcolor="white"><a href="#Buffer-Internals">Buffer Internals</a></td>
    <td>Components of a buffer structure.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Window-Internals">Window Internals</a></td>
    <td>Components of a window structure.</td>
  </tr>
  <tr>
    <td bgcolor="white"><a href="#Process-Internals">Process Internals</a></td>
    <td>Components of a process structure.
  </td></tr>
</tbody></table>